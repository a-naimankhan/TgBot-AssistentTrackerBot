package bot

import (
	"encoding/json"
	"fmt"
	"io"
	"log"
	"math/rand"
	"net/http"
	"net/url"
	"os"
	"regexp"
	"strconv"
	"strings"
	"tgprogressbot/db"
	"time"
)

var BotToken = os.Getenv("BOT_TOKEN")
var apiURL = "https://api.telegram.org/bot" + BotToken + "/"

var rituals = []string{
	"‚ö° –°—Ç–∞—Ä—Ç—É–π —Å —Ä–∏—Ç—É–∞–ª–∞: –Ω–∞–ø–æ–ª–Ω–∏ –±—É—Ç—ã–ª–∫—É, –ø–æ–¥–∫–ª—é—á–∏ –∑–∞—Ä—è–¥–∫—É, –Ω–∞–¥–µ–Ω—å –Ω–∞—É—à–Ω–∏–∫–∏ ‚Äî –º–æ–∑–≥ –ø–æ–π–º—ë—Ç, —á—Ç–æ –ø–æ—Ä–∞ —Ä–∞–±–æ—Ç–∞—Ç—å.",
	"üéß –°–æ–≤–º–µ—â–∞–π –ø—Ä–∏—è—Ç–Ω–æ–µ —Å –ø–æ–ª–µ–∑–Ω—ã–º. –£—á–∏—à—å Go ‚Äî –ø–µ–π –≤–æ–¥—É –∏–ª–∏ —Å–ª—É—à–∞–π –º—É–∑—ã–∫—É. –≠—Ç–æ –Ω–µ –æ—Ç–≤–ª–µ–∫–∞–µ—Ç, –∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç.",
	"üß† –¢—ã –Ω–µ –ø—Ä–æ—Å—Ç–æ —Ä–µ—à–∞–µ—à—å –∑–∞–¥–∞—á–∏. –¢—ã —Å—Ç–∞–Ω–æ–≤–∏—à—å—Å—è –∏–Ω–∂–µ–Ω–µ—Ä–æ–º. –í–µ—Ä—å –≤ —Å–≤–æ—é –Ω–æ–≤—É—é —Ä–æ–ª—å.",
	"üåç –°–∏–¥–∏ —Ä—è–¥–æ–º —Å —Ç–µ–º–∏, –∫—Ç–æ —Ç–æ–∂–µ —Å—Ç–∞—Ä–∞–µ—Ç—Å—è. –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–∞–∫ —è–∫–æ—Ä—å ‚Äî —Ç—ã –Ω–µ –æ–¥–∏–Ω.",
	"‚è±Ô∏è –ß–∞—Å—Ç–æ—Ç–∞ –≤–∞–∂–Ω–µ–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏. TikTok –ø–æ 10 –º–∏–Ω—É—Ç 16 —Ä–∞–∑ –≤ –¥–µ–Ω—å ‚Äî –∏ –¥–µ–Ω—å —Å–≥–æ—Ä–µ–ª. –û—Å–æ–∑–Ω–∞–≤–∞–π —ç—Ç–æ.",
	"üìç Cue Ritualization: –∑–∞–ø—É—Å–∫–∞–π —É—á—ë–±—É —Å –ø–æ–≤—Ç–æ—Ä—è–µ–º—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π ‚Äî –∏ –º–æ–∑–≥ —Å–∞–º –≤–æ–π–¥—ë—Ç –≤ —Ä–µ–∂–∏–º —Ñ–æ–∫—É—Å–∞.",
	"üîÑ Identity-Based Habits: –≥–æ–≤–æ—Ä–∏ —Å–µ–±–µ ‚Äî —è –Ω–µ –ø—Ä–æ—Å—Ç–æ —á–∏—Ç–∞—é, —è —Ä–∞—Å—Ç—É. –≠—Ç–æ –ø–µ—Ä–µ–∫–∞–ª–∏–±—Ä–æ–≤—ã–≤–∞–µ—Ç –º–æ—Ç–∏–≤–∞—Ü–∏—é.",
	"üí¨ –ü—Ä–∏–≤—è–∑—ã–≤–∞–π –Ω–æ–≤—É—é –ø—Ä–∏–≤—ã—á–∫—É –∫ —Å—Ç–∞—Ä–æ–π. –ù–∞–ø—Ä–∏–º–µ—Ä: –ø–æ—Å–ª–µ –¥—É—à–∞ ‚Äî 5 –º–∏–Ω—É—Ç —á—Ç–µ–Ω–∏—è. –≠—Ç–æ –ø—Ä–æ—â–µ, —á–µ–º –Ω–∞—á–∏–Ω–∞—Ç—å —Å –Ω—É–ª—è.",
	"ü™© –°–æ—Ü. —Å—Ä–µ–¥–∞ ‚Äî –º–æ—â–Ω—ã–π —Ä—ã—á–∞–≥. –£—á–∏—Å—å —Ç–∞–º, –≥–¥–µ –¥—Ä—É–≥–∏–µ —Ç–æ–∂–µ –≤ –¥–µ–ª–µ ‚Äî –∏ —Ç—ã –Ω–µ —Ä–∞—Å—Å–ª–∞–±–∏—à—å—Å—è.",
	"üéØ –ì–ª–∞–≤–Ω–æ–µ ‚Äî –Ω–µ –¥–µ–Ω—å, –∞ —á–∞—Å—Ç–æ—Ç–∞. –ú–∞–ª–µ–Ω—å–∫–∏–µ —à–∞–≥–∏ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –∫—É–¥–∞ –≤–∞–∂–Ω–µ–µ, —á–µ–º —Ä–µ–¥–∫–∏–µ –ø–æ–¥–≤–∏–≥–∏.",
}

var Commands = map[string]func(ChatId int64, args string){
	"/start": handleStart,
	//"/echo":        handleEcho,
	"/help":        handleHelp,
	"/remainder":   handleRemainder,
	"/add":         handleAddWords,
	"/listwords":   handleListWords,
	"/timer":       handleTimer,
	"/about":       handleAbout,
	"/instruction": HandleInstruction,
	//"/test":       // HandleTest,
	"/rituals":   handleRituals,
	"/addgoals":  handleAddGoals,
	"/listgoals": handleListGoals,
}

type Update struct { //main structure of Update
	UpdateID int `json:"update_id"`
	Message  struct {
		Text string `json:"text"`
		From *struct {
			Username string `json:"username"`
		} `json:"from"`
		Chat struct {
			ID int64 `json:"id"`
		} `json:"chat"`
	} `json:"message"`
}

func GetUpdates(offset int) ([]Update, error) {
	resp, err := http.Get(apiURL + "getUpdates?offset=" + strconv.Itoa(offset))
	if err != nil {
		log.Fatalln(err)
	}
	defer resp.Body.Close()

	body, err := io.ReadAll(resp.Body)
	if err != nil {
		log.Fatalln(err)
	}

	var result struct {
		OK     bool     `json:"ok"`
		Result []Update `json:"result"`
	}

	err = json.Unmarshal(body, &result)
	if err != nil {
		return nil, err
	}
	return result.Result, err
}

func SendMessage(chatID int64, text string) error { //–æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ
	escaped := url.QueryEscape(text)
	fullURL := apiURL + "sendMessage?chat_id=" + strconv.FormatInt(chatID, 10) + "&text=" + escaped
	resp, err := http.Get(fullURL)
	if err != nil {
		fmt.Println(err)
	}

	defer resp.Body.Close()
	return nil
}

/*func HandleTest(chatID int64, args string) {
	word, correctAns, count, err := db.GetRandomWord(chatID)
	if err != nil {
		SendMessage(chatID, "You haven't added any word yet. Use /add .")
	}
	SendMessage(chatID, "Write your a translation of "+word)
	if strings.TrimSpace(args) == "" {
		SendMessage(chatID, "What is the meaning of : "+word+"?")
	}
	userans := strings.ToLower(strings.Trimspace(args))
	correctans := strings.Split(strings.ToLower(correctAns), ";")

	Is
	if strings.ToLower(correctAns) == strings.ToLower(ans[1]) {
		SendMessage(chatID, "You've Got it Correct")
		count++
	} else {
		SendMessage(chatID, "You've Got it wrong all of the attemps will be 0 ")
		count = 0
	}
	DB.Exec("UPDATE words SET correct_count = ($1) WHERE user_id = ($2)", count, chatID)
} */

func handleAddGoals(chatId int64, args string) {
	// regex: "goal in quotes" + space + date + space + number
	re := regexp.MustCompile(`"(.+?)"\s+(\d{2}-\d{2}-\d{4})\s+(\d+)`)
	matches := re.FindStringSubmatch(args)

	if len(matches) != 4 {
		SendMessage(chatId, "‚ùó –§–æ—Ä–º–∞—Ç: /addgoals \"—Ç–≤–æ—è —Ü–µ–ª—å\" DD-MM-YYYY N (—á–µ—Ä–µ–∑ —Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å(–ø–æ–∫–∞ —á—Ç–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç)) –æ–±—å—è–∑–∞—Ç–µ–ª—å–Ω–æ –≤ –∫–æ–≤—á–∫–∞—Ö")
		return
	}

	goal := matches[1]
	deadlineStr := matches[2]
	remainderStr := matches[3]

	deadline, err := time.Parse("02-01-2006", deadlineStr)
	if err != nil {
		SendMessage(chatId, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π DD-MM-YYYY")
		return
	}

	remainder, err := strconv.Atoi(remainderStr)
	if err != nil {
		SendMessage(chatId, "üî¢ –ü–æ—Å–ª–µ–¥–Ω–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º ‚Äî –∏–Ω—Ç–µ—Ä–≤–∞–ª –≤ –¥–Ω—è—Ö")
		return
	}

	err = db.AddGoal(chatId, goal, deadline, remainder)
	if err != nil {
		SendMessage(chatId, "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ü–µ–ª—å: "+err.Error())
		return
	}

	SendMessage(chatId, "üéØ –¶–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω–∞: \""+goal+"\"\n"+
		"‚è≥ –î–µ–¥–ª–∞–π–Ω: "+deadline.Format("02 Jan 2006")+"\n"+
		"üîÅ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∫–∞–∂–¥—ã–µ "+strconv.Itoa(remainder)+" –¥–Ω–µ–π")
}

func handleListGoals(chatId int64, args string) {
	goals, err := db.GetGoals(chatId)
	if err != nil {
		SendMessage(chatId, "faced some problems while getting data")
		fmt.Println(err)
		return
	}

	if len(goals) == 0 {
		SendMessage(chatId, "üì≠ –£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç —Ü–µ–ª–µ–π. –î–æ–±–∞–≤—å –∏—Ö —Å –ø–æ–º–æ—â—å—é /addgoals")
		return
	}

	message := "Your goals : \n" + strings.Join(goals, "\n")
	SendMessage(chatId, message)

}

func handleAddWords(chatID int64, args string) {
	parts := strings.SplitN(args, " ", 3)

	if len(parts) < 3 {
		SendMessage(chatID, "Not enough arguments please write it in order of  /add {word} {translation} {deadline(1s , 10m , 1h)}")
		return
	}

	word := parts[0]
	translation := parts[1]
	duration, err := time.ParseDuration(parts[2])
	if err != nil {
		SendMessage(chatID, "Wrong format for go u should accomplis like :  10s , 5m , 2h ")
		return
	}
	Deadl := time.Now().Add(duration)
	err = db.AddWords(chatID, word, translation, Deadl)
	if err != nil {
		fmt.Println("faced and error while adding to DB", err)
		SendMessage(chatID, "Have problem while adding your word((")
		return
	}
	SendMessage(chatID, "Word added. I'll remind you after "+duration.String())

	go func() {
		time.Sleep(duration)
		SendMessage(chatID, "It is deadline! you promised yourself to learn about word : "+word)
	}()
}

func handleListWords(chatID int64, args string) {
	words, err := db.GetUserWords(chatID)
	if err != nil {
		SendMessage(chatID, "You haven't saved any words yet . Use /add some.")
		return
	}

	message := "Your vocabluary : \n" + strings.Join(words, "\n")
	SendMessage(chatID, message)
}

func handleStart(chatID int64, args string) {
	SendMessage(chatID, " Hello! I'm your tracker for your progress . I hope I can help to improve you effectivity in any type of spheres :D   use /help to know more about this bot")
}

func handleHelp(chatID int64, args string) {
	message :=
		`There is the list of the commands:
	0. /about (start with it before working with bot)
	0.1 /instruction how to use it in more effective way. 
	1. /start
	2. /add {word} {translation} {time} (Add a new word to learn into vocabulary)
	3. /listwords Shows the every word that you added.
	4. tracker (Shows what you wanted to do) (didn't add yet)
	5. /remainder {time} {thing to remind (write as one string for_example)}
	6. /timer {time} (Tells when the time has gone)
	7./rituals shows some of my rituals to be more focused.
	8./addgoals "{goal}" DD-MM-YYYY random number . You can add your goals here 
	9./listgoals shows your goals and when u wanted to finish them
	DM me if you want to see something new here is my tg @itachi0824
`
	SendMessage(chatID, message)

}

func handleTimer(chatID int64, args string) {
	parts := strings.SplitN(args, " ", 1)
	durationStr := parts[0]

	duration, err := time.ParseDuration(durationStr)
	if err != nil {
		SendMessage(chatID, "Wrong format of the time use 1s , 1m , 1h")
	}

	SendMessage(chatID, "Time is setted I'll remind you after "+duration.String())
	go func() {
		time.Sleep(duration)
		SendMessage(chatID, "Time is up!!!!")
	}()
}

func handleRemainder(chatID int64, args string) {
	parts := strings.SplitN(args, " ", 2)
	if len(parts) < 2 {
		SendMessage(chatID, "SEND 2 message one is  /remainder {time} {message}  so it works properly")
		return
	}

	durationStr := parts[0]
	message := parts[1]

	duration, err := time.ParseDuration(durationStr)
	if err != nil {
		SendMessage(chatID, "Wrong format for go u should accomplis like :  10s , 5m , 2h ")
		return
	}

	SendMessage(chatID, "Remainder placed , i'll remind u then!")

	go func() {
		time.Sleep(duration)
		SendMessage(chatID, " Remainding:  "+message)
	}()
}
func handleAbout(chatID int64, args string) {
	message := `*AssistentTracker_bot* ‚Äî —Ç–≤–æ–π —Ü–∏—Ñ—Ä–æ–≤–æ–π —Å–æ—é–∑–Ω–∏–∫ –≤ –ø—É—Ç–∏ –∫ –ª—É—á—à–µ–π –≤–µ—Ä—Å–∏–∏ —Å–µ–±—è.

	üß† –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å:
	‚Ä¢ –î–æ–±–∞–≤–ª—è–π –∏ —É—á–∏ –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ —Å–ª–æ–≤–∞
	‚Ä¢ –°—Ç–∞–≤—å —Ü–µ–ª–∏ –∏ –¥–µ–¥–ª–∞–π–Ω—ã
	‚Ä¢ –ü–æ–ª—É—á–∞–π –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
	‚Ä¢ –ó–∞–ø–∏—Å—ã–≤–∞–π –∏–¥–µ–∏
	‚Ä¢ –§–æ—Ä–º–∏—Ä—É–π –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—É
	
	–ì–ª–∞–≤–Ω–∞—è –∏–¥–µ—è: –Ω–µ –ø—Ä–æ—Å—Ç–æ —Ö—Ä–∞–Ω–∏—Ç—å ‚Äî –∞ *–Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å*, *–≤–æ–∑–≤—Ä–∞—â–∞—Ç—å* –∏ *–ø–æ–¥—Ç–∞–ª–∫–∏–≤–∞—Ç—å* –∫ –¥–µ–π—Å—Ç–≤–∏—è–º. 
	–ù–µ –∑–∞–±—ã–≤–∞–π —Å–≤–æ–∏ —Ü–µ–ª–∏ ‚Äî —Å—Ç—Ä–æ–π —Å–µ–±—è —à–∞–≥ –∑–∞ —à–∞–≥–æ–º.`

	SendMessage(chatID, message)
}

func HandleInstruction(chatID int64, args string) {
	message := `üìå –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å AssistentTracker_bot —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ
	–≠—Ç–æ—Ç –±–æ—Ç ‚Äî –Ω–µ —Ü–µ–ª—å —Å–∞–º –ø–æ —Å–µ–±–µ, –∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç, –∫–∞–∫ –≤–µ–ª–æ—Å–∏–ø–µ–¥ –¥–ª—è —Ç–æ–≥–æ, –∫—Ç–æ –∏–¥—ë—Ç –∫ –≤–µ—Ä—à–∏–Ω–µ.
	–û–Ω –Ω–µ —Å–¥–µ–ª–∞–µ—Ç —Ä–∞–±–æ—Ç—É –∑–∞ —Ç–µ–±—è, –Ω–æ –ø–æ–º–æ–∂–µ—Ç –Ω–µ —Å–±–∏—Ç—å—Å—è —Å –ø—É—Ç–∏ –∏ –Ω–µ –∑–∞–±—ã—Ç—å, –∑–∞—á–µ–º —Ç—ã –Ω–∞—á–∞–ª.

	üîî –ß—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –≤–Ω–∞—á–∞–ª–µ:
	–í–∫–ª—é—á–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–ø—É—Å–∫–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è.

	–ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /add, —á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤–∞–∂–Ω—ã–µ —Å–ª–æ–≤–∞ –∏–ª–∏ –∑–∞–¥–∞—á–∏ —Å –¥–µ–¥–ª–∞–π–Ω–∞–º–∏.

	–°—Ç–∞–≤—å —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ —Ç–∞–π–º–µ—Ä—ã ‚Äî —Ç–∞–∫ —Ç—ã –Ω–∞—É—á–∏—à—å—Å—è —É–≤–∞–∂–∞—Ç—å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å—Ä–æ–∫–∏.

	üí° –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å:
	–ó–∞–ø–∏—Å—ã–≤–∞–π –∏–¥–µ–∏, –¥–∞–∂–µ –µ—Å–ª–∏ –æ–Ω–∏ –∫–∞–∂—É—Ç—Å—è —Å—ã—Ä—ã–º–∏.

	–ù–∞–ø–æ–º–∏–Ω–∞–π —Å–µ–±–µ –æ —Ü–µ–ª—è—Ö —Å –ø–æ–º–æ—â—å—é /remainder.

	–ò—Å–ø–æ–ª—å–∑—É–π /tracker –∏ –¥—Ä—É–≥–∏–µ –∫–æ–º–∞–Ω–¥—ã, —á—Ç–æ–±—ã –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å.

	–°—Ñ–æ—Ä–º–∏—Ä—É–π –ø—Ä–∏–≤—ã—á–∫—É –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å—Å—è –∫ —Å–≤–æ–∏–º —Ü–µ–ª—è–º –µ–∂–µ–¥–Ω–µ–≤–Ω–æ ‚Äî —Ö–æ—Ç—è –±—ã –Ω–∞ 5 –º–∏–Ω—É—Ç.

	üß† –°–æ–≤–µ—Ç—ã:
	–¶–µ–ª–∏ –ª—É—á—à–µ —Ä–∞—Å–ø–∏—Å—ã–≤–∞—Ç—å –≤ Notion –∏–ª–∏ –¥–Ω–µ–≤–Ω–∏–∫–µ, –∞ –±–æ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–∞–∫ "—Å—Ç–æ—Ä–æ–∂–∞", –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –ø–æ–¥—Ç–∞–ª–∫–∏–≤–∞—Ç—å.

	–ö–æ–º–±–∏–Ω–∏—Ä—É–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã: Notion, ChatGPT, —ç—Ç–æ—Ç –±–æ—Ç ‚Äî –∫–∞–∂–¥—ã–π –ø–æ–∫—Ä—ã–≤–∞–µ—Ç —Å–≤–æ–π –∫—É—Å–æ–∫. –í–º–µ—Å—Ç–µ ‚Äî —ç—Ç–æ –º–æ—â—å.

	–ß–∏—Ç–∞–π—Ç–µ —Å—Ç–∞—Ç—å–∏, –∏–∑—É—á–∞–π—Ç–µ –æ–ø—ã—Ç –¥—Ä—É–≥–∏—Ö, —Ñ–æ—Ä–º–∏—Ä—É–π—Ç–µ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—É ‚Äî –∏ –≤—ã —Å—Ç–∞–Ω–µ—Ç–µ –Ω–∞ –≥–æ–ª–æ–≤—É –≤—ã—à–µ –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–∞.`
	SendMessage(chatID, message)
}

func handleRituals(chatId int64, args string) {
	rand.Seed(time.Now().UnixNano())

	index := rand.Intn(len(rituals))
	SendMessage(chatId, rituals[index])

}

//func handleEcho(chatID int64, args string) {
//	SendMessage(chatID, "You said : "+args+"")
//}
